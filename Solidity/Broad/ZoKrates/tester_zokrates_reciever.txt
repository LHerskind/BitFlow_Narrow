pragma solidity ^0.4.14;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal returns (G1Point) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal returns (G2Point) {
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
    }
    /// @return the negation of p, i.e. p.add(p.negate()) should be zero.
    function negate(G1Point p) internal returns (G1Point) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return the sum of two points of G1
    function add(G1Point p1, G1Point p2) internal returns (G1Point r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 6, 0, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require(success);
    }
    /// @return the product of a point on G1 and a scalar, i.e.
    /// p == p.mul(1) and p.add(p) == p.mul(2) for all points p.
    function mul(G1Point p, uint s) internal returns (G1Point r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 7, 0, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require (success);
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] p1, G2Point[] p2) internal returns (bool) {
        require(p1.length == p2.length);
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 8, 0, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require(success);
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point a1, G2Point a2, G1Point b1, G2Point b2) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point a1, G2Point a2,
            G1Point b1, G2Point b2,
            G1Point c1, G2Point c2
    ) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point a1, G2Point a2,
            G1Point b1, G2Point b2,
            G1Point c1, G2Point c2,
            G1Point d1, G2Point d2
    ) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract Verifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G2Point A;
        Pairing.G1Point B;
        Pairing.G2Point C;
        Pairing.G2Point gamma;
        Pairing.G1Point gammaBeta1;
        Pairing.G2Point gammaBeta2;
        Pairing.G2Point Z;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G1Point A_p;
        Pairing.G2Point B;
        Pairing.G1Point B_p;
        Pairing.G1Point C;
        Pairing.G1Point C_p;
        Pairing.G1Point K;
        Pairing.G1Point H;
    }
    function verifyingKey() internal returns (VerifyingKey vk) {
        vk.A = Pairing.G2Point([0x2810184bddb5b833fc186b609aaf78005284402cfe1bbfc426c648e2661f1ba5, 0x1f118259c4f3ea52f7674a600134a2b5325fbd7edf5cbd3bfff25159a85f69ec], [0x64b9efe7002231b21c7ec0ae531b6560bd0c632956fd208391ff9ce04bd584a, 0x15ada0a51abbad8b1bdd5f7312dea07c8b7d05e08f597827fa9cc332556b092b]);
        vk.B = Pairing.G1Point(0x14ce9f733ea71b664973acc2dddae9cb00ba0df54db7791677a44fafa1a20614, 0x2ac12c12fdb3114aeefac1c773e00a50d2c763d1488c2f930c0491fa9e4684b8);
        vk.C = Pairing.G2Point([0x19d03af3fd205234654c51d45bfa4405ed7a6b43e55ec2e6ec3559e090604509, 0x1690b40d2db6c4d0cabed895b426eb6f518c88768d6baacb4499aa990b86ad03], [0x2713d527d1a8fc979eafe23a27ed6e139b1d3f835cb06bd958d1537d760f1152, 0x1e0de905b902ddd3a7e700efd408ba1bc1051e031759b93cfe97b9ab09b5cf32]);
        vk.gamma = Pairing.G2Point([0x1d23ae842ade5ae5e1728eec98c8c2ea2725f9dfca24db7d4435f38df94a7d49, 0xdd1600d963dc390561a1f1b2ec89b4e03dea6734cf58bb42684027848a4a153], [0x1b1309b4c277a07e820b0521b14bc969d9b58a8018cb219ba4a8d8c315acf67c, 0x10dfa36f52229427ac019d5e0b9c66ecfac296f39d1ea17cf70938e2e4e1b650]);
        vk.gammaBeta1 = Pairing.G1Point(0x587e78fbeb59b85086e0e6932adea59b74ddcc24b1320a4699fe645ec4fbcf2, 0x1b90c98266fac28c8d34f41c969cabc7442b9569c006b8d7ddc84bebddf6f3d9);
        vk.gammaBeta2 = Pairing.G2Point([0x273fe9e130cac043be34d3a5b52d9b9db41b0908cfd9a9d7b9876c260bae9024, 0x2f9c40d4dbfa6d354f22e607db1f597d82336afa284a84b39d3a410513958e44], [0x1ed01f3984fbbeaa46d18054c9b1d2b406b255ae5291bc60cc760689b8976f5f, 0x1fbb70107018c8f9f5f99fe9135ff9cf1d0f0ea507db0a337f6ae290b2e155f4]);
        vk.Z = Pairing.G2Point([0x2eaa1be45519eda6cac7ff5c54586715af108b79b3d1610d12a53b3203655b0a, 0x1f969066c199b1d3fdf0db39bba3531a7f6850cf49b91d4b417a95b99edc222], [0x1edd48ea5546368417f6652a1edcd9069d06b79e3da5e8b8b466de6b9c10a2de, 0x300e9032f10a6ed9426e816d93a12c3ccafb7cbde5a8d00c697da9556bf1957e]);
        vk.IC = new Pairing.G1Point[](5);
        vk.IC[0] = Pairing.G1Point(0x4ec71fe633d96f21a4e055168d1ab1d400294376203ad25baaf7478ba8252b, 0x1c2aad4b1c0f399d2334379525db23843576905c172fdbfa08c98e9da6f7ff0a);
        vk.IC[1] = Pairing.G1Point(0x2410b316e711373258769069f874ddb83d72b05e282353793543f46501ef0120, 0x2ffab8b03cb58df1fe1f63dd1dad1bcf7c0ea50156a29f0d8462da5c2f319481);
        vk.IC[2] = Pairing.G1Point(0x93247931785fe7adbecf6e2f5e546d0e19fa5b64cfe16429a6c112ce13095c4, 0x2b0488fcebc24101774a46aff17634a4467206edaba9a557361d71bba933d5ec);
        vk.IC[3] = Pairing.G1Point(0x1071a63cad2ef05d50953628b586136d03ea5957607358aa42985951a38aeb13, 0x2abcfee740d7ff2eb317b19e9e6c91fc269b97d72832406274d5c67497a3baf9);
        vk.IC[4] = Pairing.G1Point(0x1bd9473a67381ccb173a040ff3f7c3ed5ff55427adeee05dbf781d8f1e04fa65, 0x26f7023cac89ced62b73eac759ce04cf600ffe4a668bf0097ced371b876ec654);
    }
    function verify(uint[] input, Proof proof) internal returns (uint) {
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length);
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++)
            vk_x = Pairing.add(vk_x, Pairing.mul(vk.IC[i + 1], input[i]));
        vk_x = Pairing.add(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd2(proof.A, vk.A, Pairing.negate(proof.A_p), Pairing.P2())) return 1;
        if (!Pairing.pairingProd2(vk.B, proof.B, Pairing.negate(proof.B_p), Pairing.P2())) return 2;
        if (!Pairing.pairingProd2(proof.C, vk.C, Pairing.negate(proof.C_p), Pairing.P2())) return 3;
        if (!Pairing.pairingProd3(
            proof.K, vk.gamma,
            Pairing.negate(Pairing.add(vk_x, Pairing.add(proof.A, proof.C))), vk.gammaBeta2,
            Pairing.negate(vk.gammaBeta1), proof.B
        )) return 4;
        if (!Pairing.pairingProd3(
                Pairing.add(vk_x, proof.A), proof.B,
                Pairing.negate(proof.H), vk.Z,
                Pairing.negate(proof.C), Pairing.P2()
        )) return 5;
        return 0;
    }
    event Verified(string);
    function verifyTx(
            uint[2] a,
            uint[2] a_p,
            uint[2][2] b,
            uint[2] b_p,
            uint[2] c,
            uint[2] c_p,
            uint[2] h,
            uint[2] k,
            uint[4] input
        ) returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.A_p = Pairing.G1Point(a_p[0], a_p[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.B_p = Pairing.G1Point(b_p[0], b_p[1]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        proof.C_p = Pairing.G1Point(c_p[0], c_p[1]);
        proof.H = Pairing.G1Point(h[0], h[1]);
        proof.K = Pairing.G1Point(k[0], k[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            Verified("Transaction successfully verified.");
            return true;
        } else {
            return false;
        }
    }
}


var verifierContract2= web3.eth.contract([{"constant":false,"inputs":[{"name":"a","type":"uint256[2]"},{"name":"a_p","type":"uint256[2]"},{"name":"b","type":"uint256[2][2]"},{"name":"b_p","type":"uint256[2]"},{"name":"c","type":"uint256[2]"},{"name":"c_p","type":"uint256[2]"},{"name":"h","type":"uint256[2]"},{"name":"k","type":"uint256[2]"},{"name":"input","type":"uint256[4]"}],"name":"verifyTx","outputs":[{"name":"r","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"string"}],"name":"Verified","type":"event"}]);
var verifier2 = verifierContract2.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b6119fa8061001e6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302e39a7614610046575b600080fd5b341561005157600080fd5b610222600480806040019060028060200260405190810160405280929190826002602002808284378201915050505050919080604001906002806020026040519081016040528092919082600260200280828437820191505050505091908060800190600280602002604051908101604052809291906000905b8282101561010d5783826040020160028060200260405190810160405280929190826002602002808284378201915050505050815260200190600101906100cb565bc565b604051808215151515815260200191505060405180910390f35b6000610246611771565b61024e6117e7565b600060408051908101604052808e600060028110151561026a57fe5b602002015181526020018e600160028110151561028357fe5b6020020151815250836000018190525060408051908101604052808d60006002811015156102ad57fe5b602002015181526020018d60016002811015156102c657fe5b60200201518152508360200181905250604080519081016040528060408051908101604052808e60006002811015156102fb57fe5b6020020151600060028110151561030e57fe5b602002015181526020018e600060028110151561032757fe5b6020020151600160028110151561033a57fe5b6020020151815250815260200160408051908101604052808e600160028110151561036157fe5b6020020151600060028110151561037457fe5b602002015181526020018e600160028110151561038d57fe5b602002015160016002811015156103a057fe5b6020020151815250815250836040018190525060408051908101604052808b60006002811015156103cd57fe5b602002015181526020018b60016002811015156103e657fe5b6020020151815250836060018190525060408051908101604052808a600060028110151561041057fe5b602002015181526020018a600160028110151561042957fe5b60200201518152508360800181905250604080519081016040528089600060028110151561045357fe5b6020020151815260200189600160028110151561046c57fe5b60200201518152508360a00181905250604080519081016040528088600060028110151561049657fe5b602002015181526020018860016002811015156104af57fe5b60200201518152508360e0018190525060408051908101604052808760006002811015156104d957fe5b602002015181526020018760016002811015156104f257fe5b60200201518152508360c0018190525060046040518059106105115750595b90808252806020026020018201604052509150600090505b600481101561056e57848160048110151561054057fe5b6020020151828281518110151561055357fe5b90602001906020020181815250508080600101915050610529565b600061057a838561062c565b1415610617577f3f3cfdb26fb5f9f1786ab4f1a1f9cd4c0b5e726cbdfc26e495261731aad44e396040518080602001828103825260228152602001807f5472616e73616374696f6e207375636365737366756c6c79207665726966696581526020017f642e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390a16001935061061c565b600093505b5050509998505050505050505050565b60006106366117fb565b61063e611871565b6000610648610863565b92508260e0015151600187510114151561066157600080fd5b60408051908101604052806000815260200160008152509150600090505b85518110156106df576106d0826106cb8560e00151600185018151811015156106a457fe5b9060200190602002015189858151811015156106bc57fe5b90602001906020020151610f97565b611033565b9150808060010191505061067f565b610705828460e0015160008151811015156106f657fe5b90602001906020020151611033565b915061072e8560000151846000015161072188602001516110f0565b61072961118b565b611255565b151561073d576001935061085a565b6107648360200151866040015161075788606001516110f0565b61075f61118b565b611255565b1515610773576002935061085a565b61079a8560800151846040015161078d8860a001516110f0565b61079561118b565b611255565b15156107a9576003935061085a565b6107f58560c0015184606001516107d96107d4866107cf8b600001518c60800151611033565b611033565b6110f0565b8660a001516107eb88608001516110f0565b8a60400151611381565b1515610804576004935061085a565b610846610815838760000151611033565b86604001516108278860e001516110f0565b8660c001516108398a608001516110f0565b61084161118b565b611381565b1515610855576005935061085a565b600093505b50505092915050565b61086b6117fb565b604080519081016040528060408051908101604052807f2810184bddb5b833fc186b609aaf78005284402cfe1bbfc426c648e2661f1ba581526020017f1f118259c4f3ea52f7674a600134a2b5325fbd7edf5cbd3bfff25159a85f69ec815250815260200160408051908101604052807f064b9efe7002231b21c7ec0ae531b6560bd0c632956fd208391ff9ce04bd584a81526020017f15ada0a51abbad8b1bdd5f7312dea07c8b7d05e08f597827fa9cc332556b092b815250815250816000018190525060408051908101604052807f14ce9f733ea71b664973acc2dddae9cb00ba0df54db7791677a44fafa1a2061481526020017f2ac12c12fdb3114aeefac1c773e00a50d2c763d1488c2f930c0491fa9e4684b88152508160200181905250604080519081016040528060408051908101604052807f19d03af3fd205234654c51d45bfa4405ed7a6b43e55ec2e6ec3559e09060450981526020017f1690b40d2db6c4d0cabed895b426eb6f518c88768d6baacb4499aa990b86ad03815250815260200160408051908101604052807f2713d527d1a8fc979eafe23a27ed6e139b1d3f835cb06bd958d1537d760f115281526020017f1e0de905b902ddd3a7e700efd408ba1bc1051e031759b93cfe97b9ab09b5cf328152508152508160400181905250604080519081016040528060408051908101604052807f1d23ae842ade5ae5e1728eec98c8c2ea2725f9dfca24db7d4435f38df94a7d4981526020017f0dd1600d963dc390561a1f1b2ec89b4e03dea6734cf58bb42684027848a4a153815250815260200160408051908101604052807f1b1309b4c277a07e820b0521b14bc969d9b58a8018cb219ba4a8d8c315acf67c81526020017f10dfa36f52229427ac019d5e0b9c66ecfac296f39d1ea17cf70938e2e4e1b650815250815250816060018190525060408051908101604052807f0587e78fbeb59b85086e0e6932adea59b74ddcc24b1320a4699fe645ec4fbcf281526020017f1b90c98266fac28c8d34f41c969cabc7442b9569c006b8d7ddc84bebddf6f3d98152508160800181905250604080519081016040528060408051908101604052807f273fe9e130cac043be34d3a5b52d9b9db41b0908cfd9a9d7b9876c260bae902481526020017f2f9c40d4dbfa6d354f22e607db1f597d82336afa284a84b39d3a410513958e44815250815260200160408051908101604052807f1ed01f3984fbbeaa46d18054c9b1d2b406b255ae5291bc60cc760689b8976f5f81526020017f1fbb70107018c8f9f5f99fe9135ff9cf1d0f0ea507db0a337f6ae290b2e155f48152508152508160a00181905250604080519081016040528060408051908101604052807f2eaa1be45519eda6cac7ff5c54586715af108b79b3d1610d12a53b3203655b0a81526020017f01f969066c199b1d3fdf0db39bba3531a7f6850cf49b91d4b417a95b99edc222815250815260200160408051908101604052807f1edd48ea5546368417f6652a1edcd9069d06b79e3da5e8b8b466de6b9c10a2de81526020017f300e9032f10a6ed9426e816d93a12c3ccafb7cbde5a8d00c697da9556bf1957e8152508152508160c001819052506005604051805910610d0d5750595b908082528060200260200182016040528015610d4357816020015b610d3061188b565b815260200190600190039081610d285790505b508160e0018190525060408051908101604052807e4ec71fe633d96f21a4e055168d1ab1d400294376203ad25baaf7478ba8252b81526020017f1c2aad4b1c0f399d2334379525db23843576905c172fdbfa08c98e9da6f7ff0a8152508160e001516000815181101515610db357fe5b9060200190602002018190525060408051908101604052807f2410b316e711373258769069f874ddb83d72b05e282353793543f46501ef012081526020017f2ffab8b03cb58df1fe1f63dd1dad1bcf7c0ea50156a29f0d8462da5c2f3194818152508160e001516001815181101515610e2857fe5b9060200190602002018190525060408051908101604052807f093247931785fe7adbecf6e2f5e546d0e19fa5b64cfe16429a6c112ce13095c481526020017f2b0488fcebc24101774a46aff17634a4467206edaba9a557361d71bba933d5ec8152508160e001516002815181101515610e9d57fe5b9060200190602002018190525060408051908101604052807f1071a63cad2ef05d50953628b586136d03ea5957607358aa42985951a38aeb1381526020017f2abcfee740d7ff2eb317b19e9e6c91fc269b97d72832406274d5c67497a3baf98152508160e001516003815181101515610f1257fe5b9060200190602002018190525060408051908101604052807f1bd9473a67381ccb173a040ff3f7c3ed5ff55427adeee05dbf781d8f1e04fa6581526020017f26f7023cac89ced62b73eac759ce04cf600ffe4a668bf0097ced371b876ec6548152508160e001516004815181101515610f8757fe5b9060200190602002018190525090565b610f9f611871565b610fa76118a5565b60008460000151826000600381101515610fbd57fe5b6020020181815250508460200151826001600381101515610fda57fe5b60200201818152505083826002600381101515610ff357fe5b602002018181525050606083608084600060076107d05a03f19050806000811461101c5761101e565bfe5b5080151561102b57600080fd5b505092915050565b61103b611871565b6110436118cd565b6000846000015182600060048110151561105957fe5b602002018181525050846020015182600160048110151561107657fe5b602002018181525050836000015182600260048110151561109357fe5b60200201818152505083602001518260036004811015156110b057fe5b60200201818152505060608360c084600060066107d05a03f1905080600081146110d9576110db565bfe5b508015156110e857600080fd5b505092915050565b6110f8611871565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015611135575060008360200151145b156111585760408051908101604052806000815260200160008152509150611185565b60408051908101604052808460000151815260200182856020015181151561117c57fe5b06830381525091505b50919050565b6111936118f5565b604080519081016040528060408051908101604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160408051908101604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa815250815250905090565b600061125f61191c565b611267611930565b60026040518059106112765750595b9080825280602002602001820160405280156112ac57816020015b61129961188b565b8152602001906001900390816112915790505b50915060026040518059106112be5750595b9080825280602002602001820160405280156112f457816020015b6112e1611944565b8152602001906001900390816112d95790505b5090508682600081518110151561130757fe5b906020019060200201819052508482600181518110151561132457fe5b906020019060200201819052508581600081518110151561134157fe5b906020019060200201819052508381600181518110151561135e57fe5b9060200190602002018190525061137582826114e9565b92505050949350505050565b600061138b61191c565b611393611930565b60036040518059106113a25750595b9080825280602002602001820160405280156113d857816020015b6113c561188b565b8152602001906001900390816113bd5790505b50915060036040518059106113ea5750595b90808252806020026020018201604052801561142057816020015b61140d611944565b8152602001906001900390816114055790505b5090508882600081518110151561143357fe5b906020019060200201819052508682600181518110151561145057fe5b906020019060200201819052508482600281518110151561146d57fe5b906020019060200201819052508781600081518110151561148a57fe5b90602001906020020181905250858160018151811015156114a757fe5b90602001906020020181905250838160028151811015156114c457fe5b906020019060200201819052506114db82826114e9565b925050509695505050505050565b60008060006114f66117e7565b600061150061196b565b60008751895114151561151257600080fd5b885195506006860294508460405180591061152a5750595b90808252806020026020018201604052509350600092505b8583101561171757888381518110151561155857fe5b9060200190602002015160000151846000600686020181518110151561157a57fe5b9060200190602002018181525050888381518110151561159657fe5b906020019060200201516020015184600160068602018151811015156115b857fe5b906020019060200201818152505087838151811015156115d457fe5b906020019060200201516000015160006002811015156115f057fe5b6020020151846002600686020181518110151561160957fe5b9060200190602002018181525050878381518110151561162557fe5b9060200190602002015160000151600160028110151561164157fe5b6020020151846003600686020181518110151561165a57fe5b9060200190602002018181525050878381518110151561167657fe5b9060200190602002015160200151600060028110151561169257fe5b602002015184600460068602018151811015156116ab57fe5b906020019060200201818152505087838151811015156116c757fe5b906020019060200201516020015160016002811015156116e357fe5b602002015184600560068602018151811015156116fc57fe5b90602001906020020181815250508280600101935050611542565b6020826020870260208701600060086107d05a03f19050806000811461173c5761173e565bfe5b5080151561174b57600080fd5b600082600060018110151561175c57fe5b60200201511415965050505050505092915050565b6102406040519081016040528061178661188b565b815260200161179361188b565b81526020016117a0611944565b81526020016117ad61188b565b81526020016117ba61188b565b81526020016117c761188b565b81526020016117d461188b565b81526020016117e161188b565b81525090565b602060405190810160405280600081525090565b61032060405190810160405280611810611944565b815260200161181d61188b565b815260200161182a611944565b8152602001611837611944565b815260200161184461188b565b8152602001611851611944565b815260200161185e611944565b815260200161186b611993565b81525090565b604080519081016040528060008152602001600081525090565b604080519081016040528060008152602001600081525090565b6060604051908101604052806003905b60008152602001906001900390816118b55790505090565b6080604051908101604052806004905b60008152602001906001900390816118dd5790505090565b6080604051908101604052806119096119a7565b81526020016119166119a7565b81525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6080604051908101604052806119586119a7565b81526020016119656119a7565b81525090565b6020604051908101604052806001905b600081526020019060019003908161197b5790505090565b602060405190810160405280600081525090565b60408051908101604052806002905b60008152602001906001900390816119b657905050905600a165627a7a7230582039026dad655bd38aa3b2550326fe0c58c97d829092f89a421b882b193b87a1a40029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })

var verifier2 = verifier2Contract.at("0x8c67bd1f65cf62bb00214c8cd5f0c8c22f40d045")










Proof 1 
["0x4e375e1e78f730f84477523b85b1b97cad140e0856ac308259e2e30b145f13a","0x181008d7fe1e4b5449dc4af831663a55a3960638a60a3d28328411e190440349"],["0x1ee3b0aa780c3d4651d25e63383e83feb35d6185f45a2762b88c796560f26722","0xe92236f188d5535796a7b33e341e5325a1a1cb0cc750073d829feb316ca0697"],
[["0x1504cd8180d35102e574b115758f9088d111b80f1e407b5e9f0029e436d596be","0xff46fbf1af44e5fba37dfd1618201d1a615fce2ca35e72be62e32aab94b8f7b"],["0x2872fc844a4a54da351b61a395668f955671aa30544fb6ea54ee1945cd121bbe","0x208548ba5449c1ec50621e9de9f6946afba6026743e92c43c310950f6ff5736e"]],["0x173c1c927642c00db3b9dc4ea621e0e2b773b14ca536789f4bd0c9e2b7819c46","0x24ee321286e3f3e53f2be1e5a02c2bbad1f4c8cc7a50858ec467d260aee236af"],["0x1cd6bf0d0382a80ff41f2a5faf2d8a8668911535bd4528209e71914177db82e5","0x2756a533e6e69017e4c39c0617aea2338c6f633a0416fb6d1ca33e99931e0e98"],["0x7c0a829c3e283e52920fe2edd44cf1893e8c4f01d739d5b6d26baa35a31efac","0x10e4854c41240a76b51006b6f7295cca51bbaa074f55488ce04f4e42f0f95bf6"],["0x2c24512fea7cbb93e89dae06518cbdafafcdf22a2dc6e065f048d7a8fdcc49ba","0x148ea0af54f5bbdcd1ff92b26215fa820761f6e465b32c58c6273615227b07e3"],["0x2c808942850c21b2ed0458034ee37060acda35a4e23800d9b9c5b5b725abdf11","0x220c82f99e54ccc39124e8669a4cbc70caa70d9514b767f535e0e517495cc131"],[512,8,1000,1]
HEMMELIGHEDER: 8, 2, 10

PROOF 2
A = 0xe7a16d17e0892003bf366652ffeeefbaa5c09975cbf32fcd3504425f4d9425d, 0x2b3d4638fd88c3fca97372e5695998803212d97330cf68d5c43454c374ca9312
A_p = 0x1cb967da973ced4b161d07ec69bdc5d49edd2b5de9ac207e24acb92d749ceb23, 0x7300704ab4534e652ba13f225f3f6570df07854d4a887702a125df43082457c
B = [0x3e7afa24c8767b8fa3fbe7d34f732a0b296052b2efd5f23183e2bec3cc5f115, 0xa0a48517f65d98a820177f34edcf00f5ea40b447dd234f59a029c5b9e8a563a], [0xa563e6f6d58cb374c12d23d76c86dc844fd69b08e4c0bdd9d6144e65e98b40f, 0x1d707637138e102e896ff0f257f5234ba9c725b273b608b854f5909bf6515884]
B_p = 0xb33254ae91eca041de97e2cbbdbfb62b3cc807359f74285aa489e7f5fcee0b4, 0x1bda6026aa985d0570093d4668c113ca9245811bd6afb6f983b20f682e8c6d83
C = 0x2472a437c2a9c3e867889df38daac271fdaa173ecb6461d89083416a637db555, 0x47691700b177b20be76bdb5285df39c1f3f7d11c2d82db26d78c88923057a8e
C_p = 0x2eaa071ce1bbff7990fd0f157e53585e9729dfd1bd5a29081553f17a0e464d6f, 0x29c22b8cdf55c9d364a97e0a4dfcbc3d5631626f1d99c339d692aacea04f72da
H = 0x11a44dd73954e983eb4d17e73b0de2fd3b6f0249cbb66e348c11e430a5d95fe, 0xd745cc83ffa27c6fe31fe9022c6c88c0c27579aea4c788629478234828877c0
K = 0xbb84f0d9f249891878cee4e56bbd2e886c77e06158ace1e7d15b05e9eaa5039, 0x10fed32867095ab93bb14768bde16d07394c566f1ea1b2a524d38f9352da690e
I = 27, 8 , 125, 1 
HEMMELIGHEDER: 3, 2, 5
