pragma solidity ^0.4.14;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal returns (G1Point) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal returns (G2Point) {
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
    }
    /// @return the negation of p, i.e. p.add(p.negate()) should be zero.
    function negate(G1Point p) internal returns (G1Point) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return the sum of two points of G1
    function add(G1Point p1, G1Point p2) internal returns (G1Point r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 6, 0, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require(success);
    }
    /// @return the product of a point on G1 and a scalar, i.e.
    /// p == p.mul(1) and p.add(p) == p.mul(2) for all points p.
    function mul(G1Point p, uint s) internal returns (G1Point r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 7, 0, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require (success);
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] p1, G2Point[] p2) internal returns (bool) {
        require(p1.length == p2.length);
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        assembly {
            success := call(sub(gas, 2000), 8, 0, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid }
        }
        require(success);
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point a1, G2Point a2, G1Point b1, G2Point b2) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point a1, G2Point a2,
            G1Point b1, G2Point b2,
            G1Point c1, G2Point c2
    ) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point a1, G2Point a2,
            G1Point b1, G2Point b2,
            G1Point c1, G2Point c2,
            G1Point d1, G2Point d2
    ) internal returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract Verifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G2Point A;
        Pairing.G1Point B;
        Pairing.G2Point C;
        Pairing.G2Point gamma;
        Pairing.G1Point gammaBeta1;
        Pairing.G2Point gammaBeta2;
        Pairing.G2Point Z;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G1Point A_p;
        Pairing.G2Point B;
        Pairing.G1Point B_p;
        Pairing.G1Point C;
        Pairing.G1Point C_p;
        Pairing.G1Point K;
        Pairing.G1Point H;
    }
    function verifyingKey() internal returns (VerifyingKey vk) {
        vk.A = Pairing.G2Point([0x18d748d3f0a8bbf7a7e98547a1ff8128162190868f8485ed6d88c9a291edaa83, 0x23851cc542a0ab2fcadd7ae9f9e096656832b2419d529e34d949521e2e4b042], [0x1310914193d68286071ebdfd710e8dc026f2a551b0aec1f339aaec36a0dab1d1, 0x2362c9bef19a877df22b87678b2f9942e37fad8c3b3e926351b3a888c2b532df]);
        vk.B = Pairing.G1Point(0x2c9ec2098ce14a3bbc8ff99ea91569b8d1acc0217d248b4d5854103a688c19a, 0xe7a0d21aa49830f48b4a9b22b193656e6f581fdccc21d0619b1e91b411a298d);
        vk.C = Pairing.G2Point([0x1948a004d5a2723f066ef8be0d728fd0022c89b45d040f8df987b91051dd5ed8, 0x10a0ab56caa81e49c53e3ec0fa1a2fe18790012a9214b5e40680ac527116acec], [0x201f06771222fe3027d866ad457525d1615b717221790d5d4690ddf9b4e1432f, 0x633fafd12a36d5b2189653001db8a0776bbd1024ab9c058836d8be4e470b253]);
        vk.gamma = Pairing.G2Point([0xd0a8012335e9e3aef4129c6a043e11dea05ee5d393bea00aca11c008996f1f7, 0x2ee57beb580e01d364679be7db60666143f09b00adcf03a3c4c50044bd074efd], [0x265101e60d9ac3cab470d428ac15fdde1aa2fe3949b1a5dfa7f59f24e2bcb331, 0x190a2eddd9ed8be3c76b6e336db47f535233ae67ef50312b01b5928d3ee4b14a]);
        vk.gammaBeta1 = Pairing.G1Point(0x33f51a84fb48c4a7b8df96e6da0323f97c4ab275295dd1657b8d28fdcb966b9, 0x84c3116144f8de67ef9a95918fc59659fbc1ea1620c6d656e80abb2c07b39de);
        vk.gammaBeta2 = Pairing.G2Point([0xa2a9c30f6bd963543dba3d8618939b8ec8b9b2fa7d97d5dfb5e1a6a5b146be5, 0x23240231dd18294d906bdd5d04c69ddd23f5be5485a5d229c02b3bb63fc7c208], [0x273d494820f962030885959ed32729f6027dc19bcaa079e55ccd2eef0bbf5888, 0xbf570fdd27f1c6001d8b42414d6bb63c6c41b43fe9ccfd2e9bd85f2fc038737]);
        vk.Z = Pairing.G2Point([0x2ae04633b12c59a414913eaf74bfcc3b171a5b4a495abba7f4c826cf807da3c9, 0x2fd0f7b3b24f87d4453c49c52749380c027c9c204a33a4f539217e8b116006c2], [0x8c227d8f596eb2fcaa16de7017f0ee6cdb611eb66352002a69c2d3e06d47af8, 0x2cc71885ce08001f2e89266b56e3cd45bd37240939f6fdf2551ca11d469d7ae9]);
        vk.IC = new Pairing.G1Point[](5);
        vk.IC[0] = Pairing.G1Point(0x2bfe22391da03d1238d985c322b4cc56552ce8852813682eb6d561ecfdc6b5a6, 0x2bacba6337fe61e2ff88cc148bf7c105dc87ddbc0084c9b7f7ad7c052997efcc);
        vk.IC[1] = Pairing.G1Point(0x20b555a8eb732fc3744b595f286377e21e903564d3d5e63d6af960041b3dea4, 0x8d8c6163d5e3c4feb9ec7f785913dadce95a4fe321ec8dfec06ce6a1b960376);
        vk.IC[2] = Pairing.G1Point(0xa52ed48741e4b3a7651c406dfb9d2233f1dfa7749fa14f8d94a63acf261d14f, 0x1f327de23ea3c44a8ada2730984587772ca5128b1fe6652792be6426790ad54b);
        vk.IC[3] = Pairing.G1Point(0xdc4184b61b16b04e96b67a63f0ad00e23a95dcf729f9d70df0f1e42a3b1dc55, 0xeb8b4030d3b817bad8d60ac434c5f84c6c260181996c8c342d64ef2c56cae58);
        vk.IC[4] = Pairing.G1Point(0x65a63913e488e723d42ea75df1e247425cad43832b68500caedd82cdd808def, 0x17607eff6151ef7e9c00ba778a3541fac60207384343874ed859bb16f6c41bfb);
    }
    function verify(uint[] input, Proof proof) internal returns (uint) {
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length);
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++)
            vk_x = Pairing.add(vk_x, Pairing.mul(vk.IC[i + 1], input[i]));
        vk_x = Pairing.add(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd2(proof.A, vk.A, Pairing.negate(proof.A_p), Pairing.P2())) return 1;
        if (!Pairing.pairingProd2(vk.B, proof.B, Pairing.negate(proof.B_p), Pairing.P2())) return 2;
        if (!Pairing.pairingProd2(proof.C, vk.C, Pairing.negate(proof.C_p), Pairing.P2())) return 3;
        if (!Pairing.pairingProd3(
            proof.K, vk.gamma,
            Pairing.negate(Pairing.add(vk_x, Pairing.add(proof.A, proof.C))), vk.gammaBeta2,
            Pairing.negate(vk.gammaBeta1), proof.B
        )) return 4;
        if (!Pairing.pairingProd3(
                Pairing.add(vk_x, proof.A), proof.B,
                Pairing.negate(proof.H), vk.Z,
                Pairing.negate(proof.C), Pairing.P2()
        )) return 5;
        return 0;
    }
    event Verified(string);
    function verifyTx(
            uint[2] a,
            uint[2] a_p,
            uint[2][2] b,
            uint[2] b_p,
            uint[2] c,
            uint[2] c_p,
            uint[2] h,
            uint[2] k,
            uint[4] input
        ) returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.A_p = Pairing.G1Point(a_p[0], a_p[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.B_p = Pairing.G1Point(b_p[0], b_p[1]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        proof.C_p = Pairing.G1Point(c_p[0], c_p[1]);
        proof.H = Pairing.G1Point(h[0], h[1]);
        proof.K = Pairing.G1Point(k[0], k[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            Verified("Transaction successfully verified.");
            return true;
        } else {
            return false;
        }
    }
}


var verifierContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"a","type":"uint256[2]"},{"name":"a_p","type":"uint256[2]"},{"name":"b","type":"uint256[2][2]"},{"name":"b_p","type":"uint256[2]"},{"name":"c","type":"uint256[2]"},{"name":"c_p","type":"uint256[2]"},{"name":"h","type":"uint256[2]"},{"name":"k","type":"uint256[2]"},{"name":"input","type":"uint256[4]"}],"name":"verifyTx","outputs":[{"name":"r","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"string"}],"name":"Verified","type":"event"}]);
var verifier = verifierContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b6119fb8061001e6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302e39a7614610046575b600080fd5b341561005157600080fd5b610222600480806040019060028060200260405190810160405280929190826002602002808284378201915050505050919080604001906002806020026040519081016040528092919082600260200280828437820191505050505091908060800190600280602002604051908101604052809291906000905b8282101561010d5783826040020160028060200260405190810160405280929190826002602002808284378201915050505050815260200190600101906100cb565bc565b604051808215151515815260200191505060405180910390f35b6000610246611772565b61024e6117e8565b600060408051908101604052808e600060028110151561026a57fe5b602002015181526020018e600160028110151561028357fe5b6020020151815250836000018190525060408051908101604052808d60006002811015156102ad57fe5b602002015181526020018d60016002811015156102c657fe5b60200201518152508360200181905250604080519081016040528060408051908101604052808e60006002811015156102fb57fe5b6020020151600060028110151561030e57fe5b602002015181526020018e600060028110151561032757fe5b6020020151600160028110151561033a57fe5b6020020151815250815260200160408051908101604052808e600160028110151561036157fe5b6020020151600060028110151561037457fe5b602002015181526020018e600160028110151561038d57fe5b602002015160016002811015156103a057fe5b6020020151815250815250836040018190525060408051908101604052808b60006002811015156103cd57fe5b602002015181526020018b60016002811015156103e657fe5b6020020151815250836060018190525060408051908101604052808a600060028110151561041057fe5b602002015181526020018a600160028110151561042957fe5b60200201518152508360800181905250604080519081016040528089600060028110151561045357fe5b6020020151815260200189600160028110151561046c57fe5b60200201518152508360a00181905250604080519081016040528088600060028110151561049657fe5b602002015181526020018860016002811015156104af57fe5b60200201518152508360e0018190525060408051908101604052808760006002811015156104d957fe5b602002015181526020018760016002811015156104f257fe5b60200201518152508360c0018190525060046040518059106105115750595b90808252806020026020018201604052509150600090505b600481101561056e57848160048110151561054057fe5b6020020151828281518110151561055357fe5b90602001906020020181815250508080600101915050610529565b600061057a838561062c565b1415610617577f3f3cfdb26fb5f9f1786ab4f1a1f9cd4c0b5e726cbdfc26e495261731aad44e396040518080602001828103825260228152602001807f5472616e73616374696f6e207375636365737366756c6c79207665726966696581526020017f642e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390a16001935061061c565b600093505b5050509998505050505050505050565b60006106366117fc565b61063e611872565b6000610648610863565b92508260e0015151600187510114151561066157600080fd5b60408051908101604052806000815260200160008152509150600090505b85518110156106df576106d0826106cb8560e00151600185018151811015156106a457fe5b9060200190602002015189858151811015156106bc57fe5b90602001906020020151610f98565b611034565b9150808060010191505061067f565b610705828460e0015160008151811015156106f657fe5b90602001906020020151611034565b915061072e8560000151846000015161072188602001516110f1565b61072961118c565b611256565b151561073d576001935061085a565b6107648360200151866040015161075788606001516110f1565b61075f61118c565b611256565b1515610773576002935061085a565b61079a8560800151846040015161078d8860a001516110f1565b61079561118c565b611256565b15156107a9576003935061085a565b6107f58560c0015184606001516107d96107d4866107cf8b600001518c60800151611034565b611034565b6110f1565b8660a001516107eb88608001516110f1565b8a60400151611382565b1515610804576004935061085a565b610846610815838760000151611034565b86604001516108278860e001516110f1565b8660c001516108398a608001516110f1565b61084161118c565b611382565b1515610855576005935061085a565b600093505b50505092915050565b61086b6117fc565b604080519081016040528060408051908101604052807f18d748d3f0a8bbf7a7e98547a1ff8128162190868f8485ed6d88c9a291edaa8381526020017f023851cc542a0ab2fcadd7ae9f9e096656832b2419d529e34d949521e2e4b042815250815260200160408051908101604052807f1310914193d68286071ebdfd710e8dc026f2a551b0aec1f339aaec36a0dab1d181526020017f2362c9bef19a877df22b87678b2f9942e37fad8c3b3e926351b3a888c2b532df815250815250816000018190525060408051908101604052807f02c9ec2098ce14a3bbc8ff99ea91569b8d1acc0217d248b4d5854103a688c19a81526020017f0e7a0d21aa49830f48b4a9b22b193656e6f581fdccc21d0619b1e91b411a298d8152508160200181905250604080519081016040528060408051908101604052807f1948a004d5a2723f066ef8be0d728fd0022c89b45d040f8df987b91051dd5ed881526020017f10a0ab56caa81e49c53e3ec0fa1a2fe18790012a9214b5e40680ac527116acec815250815260200160408051908101604052807f201f06771222fe3027d866ad457525d1615b717221790d5d4690ddf9b4e1432f81526020017f0633fafd12a36d5b2189653001db8a0776bbd1024ab9c058836d8be4e470b2538152508152508160400181905250604080519081016040528060408051908101604052807f0d0a8012335e9e3aef4129c6a043e11dea05ee5d393bea00aca11c008996f1f781526020017f2ee57beb580e01d364679be7db60666143f09b00adcf03a3c4c50044bd074efd815250815260200160408051908101604052807f265101e60d9ac3cab470d428ac15fdde1aa2fe3949b1a5dfa7f59f24e2bcb33181526020017f190a2eddd9ed8be3c76b6e336db47f535233ae67ef50312b01b5928d3ee4b14a815250815250816060018190525060408051908101604052807f033f51a84fb48c4a7b8df96e6da0323f97c4ab275295dd1657b8d28fdcb966b981526020017f084c3116144f8de67ef9a95918fc59659fbc1ea1620c6d656e80abb2c07b39de8152508160800181905250604080519081016040528060408051908101604052807f0a2a9c30f6bd963543dba3d8618939b8ec8b9b2fa7d97d5dfb5e1a6a5b146be581526020017f23240231dd18294d906bdd5d04c69ddd23f5be5485a5d229c02b3bb63fc7c208815250815260200160408051908101604052807f273d494820f962030885959ed32729f6027dc19bcaa079e55ccd2eef0bbf588881526020017f0bf570fdd27f1c6001d8b42414d6bb63c6c41b43fe9ccfd2e9bd85f2fc0387378152508152508160a00181905250604080519081016040528060408051908101604052807f2ae04633b12c59a414913eaf74bfcc3b171a5b4a495abba7f4c826cf807da3c981526020017f2fd0f7b3b24f87d4453c49c52749380c027c9c204a33a4f539217e8b116006c2815250815260200160408051908101604052807f08c227d8f596eb2fcaa16de7017f0ee6cdb611eb66352002a69c2d3e06d47af881526020017f2cc71885ce08001f2e89266b56e3cd45bd37240939f6fdf2551ca11d469d7ae98152508152508160c001819052506005604051805910610d0d5750595b908082528060200260200182016040528015610d4357816020015b610d3061188c565b815260200190600190039081610d285790505b508160e0018190525060408051908101604052807f2bfe22391da03d1238d985c322b4cc56552ce8852813682eb6d561ecfdc6b5a681526020017f2bacba6337fe61e2ff88cc148bf7c105dc87ddbc0084c9b7f7ad7c052997efcc8152508160e001516000815181101515610db457fe5b9060200190602002018190525060408051908101604052807f020b555a8eb732fc3744b595f286377e21e903564d3d5e63d6af960041b3dea481526020017f08d8c6163d5e3c4feb9ec7f785913dadce95a4fe321ec8dfec06ce6a1b9603768152508160e001516001815181101515610e2957fe5b9060200190602002018190525060408051908101604052807f0a52ed48741e4b3a7651c406dfb9d2233f1dfa7749fa14f8d94a63acf261d14f81526020017f1f327de23ea3c44a8ada2730984587772ca5128b1fe6652792be6426790ad54b8152508160e001516002815181101515610e9e57fe5b9060200190602002018190525060408051908101604052807f0dc4184b61b16b04e96b67a63f0ad00e23a95dcf729f9d70df0f1e42a3b1dc5581526020017f0eb8b4030d3b817bad8d60ac434c5f84c6c260181996c8c342d64ef2c56cae588152508160e001516003815181101515610f1357fe5b9060200190602002018190525060408051908101604052807f065a63913e488e723d42ea75df1e247425cad43832b68500caedd82cdd808def81526020017f17607eff6151ef7e9c00ba778a3541fac60207384343874ed859bb16f6c41bfb8152508160e001516004815181101515610f8857fe5b9060200190602002018190525090565b610fa0611872565b610fa86118a6565b60008460000151826000600381101515610fbe57fe5b6020020181815250508460200151826001600381101515610fdb57fe5b60200201818152505083826002600381101515610ff457fe5b602002018181525050606083608084600060076107d05a03f19050806000811461101d5761101f565bfe5b5080151561102c57600080fd5b505092915050565b61103c611872565b6110446118ce565b6000846000015182600060048110151561105a57fe5b602002018181525050846020015182600160048110151561107757fe5b602002018181525050836000015182600260048110151561109457fe5b60200201818152505083602001518260036004811015156110b157fe5b60200201818152505060608360c084600060066107d05a03f1905080600081146110da576110dc565bfe5b508015156110e957600080fd5b505092915050565b6110f9611872565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015611136575060008360200151145b156111595760408051908101604052806000815260200160008152509150611186565b60408051908101604052808460000151815260200182856020015181151561117d57fe5b06830381525091505b50919050565b6111946118f6565b604080519081016040528060408051908101604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160408051908101604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa815250815250905090565b600061126061191d565b611268611931565b60026040518059106112775750595b9080825280602002602001820160405280156112ad57816020015b61129a61188c565b8152602001906001900390816112925790505b50915060026040518059106112bf5750595b9080825280602002602001820160405280156112f557816020015b6112e2611945565b8152602001906001900390816112da5790505b5090508682600081518110151561130857fe5b906020019060200201819052508482600181518110151561132557fe5b906020019060200201819052508581600081518110151561134257fe5b906020019060200201819052508381600181518110151561135f57fe5b9060200190602002018190525061137682826114ea565b92505050949350505050565b600061138c61191d565b611394611931565b60036040518059106113a35750595b9080825280602002602001820160405280156113d957816020015b6113c661188c565b8152602001906001900390816113be5790505b50915060036040518059106113eb5750595b90808252806020026020018201604052801561142157816020015b61140e611945565b8152602001906001900390816114065790505b5090508882600081518110151561143457fe5b906020019060200201819052508682600181518110151561145157fe5b906020019060200201819052508482600281518110151561146e57fe5b906020019060200201819052508781600081518110151561148b57fe5b90602001906020020181905250858160018151811015156114a857fe5b90602001906020020181905250838160028151811015156114c557fe5b906020019060200201819052506114dc82826114ea565b925050509695505050505050565b60008060006114f76117e8565b600061150161196c565b60008751895114151561151357600080fd5b885195506006860294508460405180591061152b5750595b90808252806020026020018201604052509350600092505b8583101561171857888381518110151561155957fe5b9060200190602002015160000151846000600686020181518110151561157b57fe5b9060200190602002018181525050888381518110151561159757fe5b906020019060200201516020015184600160068602018151811015156115b957fe5b906020019060200201818152505087838151811015156115d557fe5b906020019060200201516000015160006002811015156115f157fe5b6020020151846002600686020181518110151561160a57fe5b9060200190602002018181525050878381518110151561162657fe5b9060200190602002015160000151600160028110151561164257fe5b6020020151846003600686020181518110151561165b57fe5b9060200190602002018181525050878381518110151561167757fe5b9060200190602002015160200151600060028110151561169357fe5b602002015184600460068602018151811015156116ac57fe5b906020019060200201818152505087838151811015156116c857fe5b906020019060200201516020015160016002811015156116e457fe5b602002015184600560068602018151811015156116fd57fe5b90602001906020020181815250508280600101935050611543565b6020826020870260208701600060086107d05a03f19050806000811461173d5761173f565bfe5b5080151561174c57600080fd5b600082600060018110151561175d57fe5b60200201511415965050505050505092915050565b6102406040519081016040528061178761188c565b815260200161179461188c565b81526020016117a1611945565b81526020016117ae61188c565b81526020016117bb61188c565b81526020016117c861188c565b81526020016117d561188c565b81526020016117e261188c565b81525090565b602060405190810160405280600081525090565b61032060405190810160405280611811611945565b815260200161181e61188c565b815260200161182b611945565b8152602001611838611945565b815260200161184561188c565b8152602001611852611945565b815260200161185f611945565b815260200161186c611994565b81525090565b604080519081016040528060008152602001600081525090565b604080519081016040528060008152602001600081525090565b6060604051908101604052806003905b60008152602001906001900390816118b65790505090565b6080604051908101604052806004905b60008152602001906001900390816118de5790505090565b60806040519081016040528061190a6119a8565b81526020016119176119a8565b81525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6080604051908101604052806119596119a8565b81526020016119666119a8565b81525090565b6020604051908101604052806001905b600081526020019060019003908161197c5790505090565b602060405190810160405280600081525090565b60408051908101604052806002905b60008152602001906001900390816119b757905050905600a165627a7a723058202ae945a950c5e1628d3f25505703bb65865f5f4ab1a72c28b8b629a2510d7db70029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


var verifier = verfierContract.at("0x74285f3883d66554a0a9097d2903eb644a7b2fc1");


Proof1:
["0x78cd603648b5e211e3c330f62d686cb11a1cce9297d6f5d7e4769e96b2a1438","0x35ec85f6cbe0f945603e93e68cb50fd1f8830c837a4d82b89b2b4d12327328"],["0x27d632935fdd8d058eb43bf781c6bd8b8137038e087fbd937da1558beed472d0","0x7bd2e1ffa8bf2264482d09a3785ebfcbdc5023747e94318dddfc05cd93dd6b8"],[["0x868552870a14a062ee9aa0c7902f14ccabb6496c153eef631895e6798ab0ce5","0x1ad712d19989d721094f0003ba9f554be3236849607921df8b4d90ce0e3ae706"],["0x6691b6d0f6abf3b446506cf58c9b142bd1da67fc2dc0442152c24aa247ee580", "0x5d7bb6cefefba2c56b9bb95fa856e03a2ff66da97e7db56d3b32ab059fd14ce"]],["0x1a079d5c0562092bb8b68b8d92da9c6d9a0358dfc65c40c1bd99b64053b59f4a","0x224f3eb75f4c3e8fc39d1bc65f2c76f7aec06e4671543456d72080cb659facb"],["0xc326667441e11d2ee256c12ecf9749d01e7174eec0fc7ab71f6662b6ff5e514","0xfa2ede97f610ca5a38f037f64d7619734c28ae7f6239ab5c48e02d3b41ba74f"],["0x243c2dd4b7bacb5837c52b08b0138e5ee1607b1b153cb9865762b1dd6d47257","0xa48ff4e9f8396afe77a073bf42bc5c710778963476c1112ee094411aaecd092"],["0x743ee5b854bf01a8651ccc76f001a8d07da92efdfe131d3de4220f7fdc04fe8","0x86cb507718669c0572b6c99bd8f36dab3622458bc360a51884e6f457054e44"],["0x84625ff8a2434ad797eff997a389235e4463bb78ab4c5560ccee73f0b944434","0x2d9cfd318d389a1789ffb56215a3889e2f8f4c041c2f0db674713a5bf4d14425"],[125,8,27,1]

I = 125,8,27,1

DE HEMMELIGE ER 5,2,3

Proof2:
["0x72076bf4d57df2b4c223eedf6f82b713d7e381b004bafc0aa1cf807402dc8e5","0x5e4139bea589f849e9af1ef286e5089a2df90a0a74a340df298e3ae2bea92f9"],["0xfd55491643b2027bd8bd212d2c8d6a41ac27094397e2ef92038fff4615ceb78","0x1c2ec12398d36bfbf33efdc58a0d21e45b5732c3d2c7a06194e637c0ee76c0dd"],[["0x57398489caeec35197baef93870baa2126d749a49d6ea2a054f2c7f69f26ba7","0x16a45f363a197b27f1a430b525e10111f79f2fbeb87bc241c04f335b216c0e9b"],["0x2565c8b409e11aa34a303efc59e0dba761d76d4d904867f2dbab951cbc75b8f0","0x2f463aa8aba546c5d8d73c076515a2c90266a928fef12b58ece1a16599901df7"]],["0x2ca6bb9ad5f27f2dea2b2476c3498207741894b4a3cdb61017b82885d43d3b8","0x3aa9eda91ac2460ede77fbba9a7d7b4ab71ccbd9cf2cb2f88a52f41eee015a9"],["0x28dea54a7ce470dfa2fb60cf901b985e19bfad0dee8d31a411b603d980a20df0","0x200cf67fb075f4291510b56e7301c3ce5928611bfd0acd55b0a665ce2c93f73d"],["0x2877a256eedae973a4e88c4f91bd7c5413363bfab88b47639fe95be592435ce1","0x117058ca1f3a845d13533dc544936e90bf3eb5708edadf000b04ff9096ca9cdf"],["0x1b95c749715409571b5b4bafe06fa1e783282b18dda9023121e53daf4722e62f", "0xd3aca6bf37046b577034b994ebb1efd346d64d97699e8bb2232cbac4875258b"],["0x241d25eb2abcdb417082de3a712149d83abcfcb2fc08892d5cc0bb0f28dd7bbf","0x2f5623474e73a6ae3d0e97ff44a569246cb2ddd58aa24be9e67b7c7dbc088b69"],[1000,8,512,1]
I = 1000, 2, 512, 1

DE HEMMELIGE ER 10, 2 ,8
